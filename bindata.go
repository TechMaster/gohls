// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ui/build/.gitignore
// ui/build/css/app.css
// ui/build/css/vendor.css
// ui/build/fonts/glyphicons-halflings-regular.eot
// ui/build/fonts/glyphicons-halflings-regular.svg
// ui/build/fonts/glyphicons-halflings-regular.ttf
// ui/build/fonts/glyphicons-halflings-regular.woff
// ui/build/fonts/glyphicons-halflings-regular.woff2
// ui/build/img/loader.svg
// ui/build/index.html
// ui/build/js/app.js
// ui/build/js/vendor.js

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// bindataGitignore reads file data from disk. It returns an error on failure.
func bindataGitignore() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/.gitignore"
	name := "/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataCssAppcss reads file data from disk. It returns an error on failure.
func bindataCssAppcss() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/css/app.css"
	name := "/css/app.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataCssVendorcss reads file data from disk. It returns an error on failure.
func bindataCssVendorcss() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/css/vendor.css"
	name := "/css/vendor.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataFontsGlyphiconshalflingsregulareot reads file data from disk. It returns an error on failure.
func bindataFontsGlyphiconshalflingsregulareot() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/fonts/glyphicons-halflings-regular.eot"
	name := "/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataFontsGlyphiconshalflingsregularsvg reads file data from disk. It returns an error on failure.
func bindataFontsGlyphiconshalflingsregularsvg() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/fonts/glyphicons-halflings-regular.svg"
	name := "/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataFontsGlyphiconshalflingsregularttf reads file data from disk. It returns an error on failure.
func bindataFontsGlyphiconshalflingsregularttf() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/fonts/glyphicons-halflings-regular.ttf"
	name := "/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataFontsGlyphiconshalflingsregularwoff reads file data from disk. It returns an error on failure.
func bindataFontsGlyphiconshalflingsregularwoff() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/fonts/glyphicons-halflings-regular.woff"
	name := "/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataFontsGlyphiconshalflingsregularwoff2 reads file data from disk. It returns an error on failure.
func bindataFontsGlyphiconshalflingsregularwoff2() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/fonts/glyphicons-halflings-regular.woff2"
	name := "/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataImgLoadersvg reads file data from disk. It returns an error on failure.
func bindataImgLoadersvg() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/img/loader.svg"
	name := "/img/loader.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataIndexhtml reads file data from disk. It returns an error on failure.
func bindataIndexhtml() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/index.html"
	name := "/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataJsAppjs reads file data from disk. It returns an error on failure.
func bindataJsAppjs() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/js/app.js"
	name := "/js/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataJsVendorjs reads file data from disk. It returns an error on failure.
func bindataJsVendorjs() (*asset, error) {
	path := "/Volumes/CODE/GoProjects/src/github.com/TechMaster/gohls/ui/build/js/vendor.js"
	name := "/js/vendor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/.gitignore":                               bindataGitignore,
	"/css/app.css":                              bindataCssAppcss,
	"/css/vendor.css":                           bindataCssVendorcss,
	"/fonts/glyphicons-halflings-regular.eot":   bindataFontsGlyphiconshalflingsregulareot,
	"/fonts/glyphicons-halflings-regular.svg":   bindataFontsGlyphiconshalflingsregularsvg,
	"/fonts/glyphicons-halflings-regular.ttf":   bindataFontsGlyphiconshalflingsregularttf,
	"/fonts/glyphicons-halflings-regular.woff":  bindataFontsGlyphiconshalflingsregularwoff,
	"/fonts/glyphicons-halflings-regular.woff2": bindataFontsGlyphiconshalflingsregularwoff2,
	"/img/loader.svg":                           bindataImgLoadersvg,
	"/index.html":                               bindataIndexhtml,
	"/js/app.js":                                bindataJsAppjs,
	"/js/vendor.js":                             bindataJsVendorjs,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		".gitignore": {Func: bindataGitignore, Children: map[string]*bintree{}},
		"css": {Func: nil, Children: map[string]*bintree{
			"app.css": {Func: bindataCssAppcss, Children: map[string]*bintree{}},
			"vendor.css": {Func: bindataCssVendorcss, Children: map[string]*bintree{}},
		}},
		"fonts": {Func: nil, Children: map[string]*bintree{
			"glyphicons-halflings-regular.eot": {Func: bindataFontsGlyphiconshalflingsregulareot, Children: map[string]*bintree{}},
			"glyphicons-halflings-regular.svg": {Func: bindataFontsGlyphiconshalflingsregularsvg, Children: map[string]*bintree{}},
			"glyphicons-halflings-regular.ttf": {Func: bindataFontsGlyphiconshalflingsregularttf, Children: map[string]*bintree{}},
			"glyphicons-halflings-regular.woff": {Func: bindataFontsGlyphiconshalflingsregularwoff, Children: map[string]*bintree{}},
			"glyphicons-halflings-regular.woff2": {Func: bindataFontsGlyphiconshalflingsregularwoff2, Children: map[string]*bintree{}},
		}},
		"img": {Func: nil, Children: map[string]*bintree{
			"loader.svg": {Func: bindataImgLoadersvg, Children: map[string]*bintree{}},
		}},
		"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
		"js": {Func: nil, Children: map[string]*bintree{
			"app.js": {Func: bindataJsAppjs, Children: map[string]*bintree{}},
			"vendor.js": {Func: bindataJsVendorjs, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
